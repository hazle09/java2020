package school2020;

public class advancedjava01 {
	/*
	 * [클래스 이름][객체이름]=new[생성자 이름];
	 * [변수형][변수 이름]=[생성된 객체 이름].[메소드 이름]([매개변수]);
	 * 
	 * 생성자(Constructor)
	 * 클래스로부터 객체를 생성한다
	 * 클래스 이름과 생성자의 이름이 같아야함
	 * 상속되지 않음
	 * 여러개 선언 가능(매개변수만 다르게(매개변수와 데이터형 중복 불가))
	 * 
	 * ~이름짓기~
	 * 클래스는 대문자로 시작
	 * 객체는 소문자로 시작
	 * 메소드도 소문자
	 * 
	 * 클래스 속성 선언하기
	 * 변수선언 앞에는 접근제어자(public)이 대체로 생략되어 있음
	 */

		/*
		 * 클래스 변수/인스턴스변수/지역 변수
		 * 클래스, 인스턴스 변수를 클래스 변수로 통칭함
		 * 선언 위치
		 * 클래스 내부/클래스 내부/메소드 내부
		 * 변수 데이터 생성 시점
		 * 클래스가 로드 될때/객체가 생성될때/메소드가 실행될 때
		 */
	/*
	 * package&import
	 * 같은 패키지 안에서 클래스 이름을 중복해서 사용할 수 없음(패키지 다르면 ㄱㅊ)
	 * 패키지는 상위 패키지 이름부터 하위 패키지 이름 순으로 표기
	 * 예)package com.gilbut.chapter5;
	 * import는 다른 메소드나 클래스 참조하기 위해서 끌고오는것 
	 */
		
	/*
	 * 객체 지향 프로그래밍의 주요 개념~
	 * 추상화(abstraction)
	 * 		객체를 설계하는 기초 단계로, 만들고자 하는 객체의 특성이나 기능이 무엇인지 정리하는 것
	 * 		정의된 객체의 기능은 클래스의 메소드로 구현
	 * 상속성
	 * 		한 클래스가 가지고 있는 속성과 메소드를 다른 클래스에게 물려주는 것
	 * 		부모 클래스-자식 클래스
	 * 		is-a법칙
	 * 			sub class is a super class
	 * 			소는 동물이다 그러나 동물은 소가 아니다 머 그런거 
	 * 캡슐화
	 * 		서로 관련 있는 기능이나 데이터를 한 곳으로 모아서 효율적으로 관리하거나 사용
	 * 		정보 은닉: 클래스 속성 중 꼭 필요한 데이터나 기능만 외부에 노출하여 정밀성, 정확성을 유지
	 * 다형성
	 * 		하나의 기능을 수행하지만 형태를 다양하게 가질 수 있는 기법 
	 */



}
